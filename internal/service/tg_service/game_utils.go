package tg_service

import (
	"bytes"
	"encoding/json"
	"fmt"
	"myapp/internal/models"
	"myapp/pkg/files"
	"myapp/pkg/my_time_parser"
	"net/http"
	"strconv"
	"strings"
	"time"
)

const (
	animTimeout500  = 500
	animTimeout1000 = 1000
	animTimeout2000 = 2000
	animTimeout3000 = 3000
	animTimeout4000 = 4000
	animTimeoutTest = 3000
)

func (srv *TgService) Send3Kruga(fromId int) {
	user, _ := srv.Db.GetUserById(fromId)
	lichka := user.Lichka
	if lichka == "" {
		lichka = "https://t.me/markodinncov"
	}
	lichkaUrl := fmt.Sprintf("https://t.me/%s", srv.DelAt(lichka))

	scheme, _ := srv.Db.GetsSchemeByLichka(lichka)

	srv.SendVideoNoteCurrFile(fromId, fmt.Sprintf("./files/krug_3_%s_day_%d.mp4",scheme.Id, scheme.ScIdx))


	siteUrl := fmt.Sprintf("%s&data=%s", scheme.Link, srv.CreateBase64UserData(user.Id, user.Username, user.Firstname))
	mesgText := srv.GetActualSchema(fromId, siteUrl)
	_, err := srv.SendMessageHTML(fromId, mesgText)
	if err != nil {
		srv.l.Error(fmt.Errorf("Send3Kruga SendMessageWRM err: %v", err))
	}

	reply_markup := fmt.Sprintf(`{"inline_keyboard" : [
		[{ "text": "–ù–∞–ø–∏—Å–∞—Ç—å –ú–∞—Ä–∫—É –≤ –õ–°", "url": "%s" }],
		[{ "text": "–û–±–æ –º–Ω–µ", "callback_data": "obo_nme_btn" }],
		[{ "text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ", "callback_data": "info_o_zarabotke_btn" }],
		[{ "text": "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "callback_data": "frequently_questions_btn" }],
		[{ "text": "–û—Ç–∑—ã–≤—ã", "callback_data": "show_reviews_btn" }]
	]}`, lichkaUrl)

	futureJson := map[string]string{
		"video_note":   fmt.Sprintf("@%s", fmt.Sprintf("./files/krug_4_%s_day_%d.mp4",scheme.Id, scheme.ScIdx)),
		"chat_id": strconv.Itoa(fromId),
		"reply_markup": reply_markup,
	}
	cf, body, err := files.CreateForm(futureJson)
	if err != nil {
		err := fmt.Errorf("Send3Kruga CreateForm err: %v", err)
		srv.l.Error(err)
	}
	srv.SendVideoNote(body, cf)
	srv.SendMsgToServer(fromId, "bot", "send_3_kruga")
}

func (srv *TgService) SendMessageAndDb(chat_id int, text string) (models.SendMessageResp, error) {
	resp, err := srv.SendMessageHTML(chat_id, text)
	if err != nil {
		return models.SendMessageResp{}, fmt.Errorf("SendMessageAndDb SendMessage err: %v", err)
	}

	srv.SendMsgToServer(chat_id, "bot", text)
	return resp, nil
}

func (srv *TgService) SendMsgToServer(user_id int, msg_author, msg_txt string) error {
	user, err := srv.Db.GetUserById(user_id)
	if err != nil {
		err := fmt.Errorf("SendMsgToServer GetUserById err: %v", err)
		srv.l.Error(err)
		return err
	}

	botId := srv.Cfg.BotId
	step_id := user.Step
	step_txt := user.Step
	stepTexts := stepsMap[step_id]
	if len(stepTexts) >= 2 {
		step_txt = stepTexts[len(stepTexts)-1]
	}
	if strings.HasPrefix(msg_txt, "/start") {
		refArr := strings.Split(msg_txt, " ")
		ref := ""
		if len(refArr) > 1 {
			ref = refArr[1]
		}
		json_data, _ := json.Marshal(map[string]any{
			"user_id":    strconv.Itoa(user_id),
			"bot_id":     strconv.Itoa(botId),
			"username":    user.Username,
			"fullname":    user.Firstname,
			"step_id":    step_id,
			"step_text":   step_txt,
			"ref":         ref,
		})
		_, err = http.Post(
			fmt.Sprintf("%s/%s", srv.Cfg.ServerStatUrl, "add_user"),
			"application/json",
			bytes.NewBuffer(json_data),
		)
		if err != nil {
			err := fmt.Errorf("SendMsgToServer Post err: %v", err)
			srv.l.Error(err)
			return err
		}
		return nil
	}

	json_data, _ := json.Marshal(map[string]any{
		"user_id":    strconv.Itoa(user_id),
		"bot_id":     strconv.Itoa(botId),
		"username":    user.Username,
		"fullname":    user.Firstname,
		"new_step_id":    step_id,
		"new_step_text":   step_txt,
	})
	_, err = http.Post(
		fmt.Sprintf("%s/%s", srv.Cfg.ServerStatUrl, "update_user_step"),
		"application/json",
		bytes.NewBuffer(json_data),
	)
	if err != nil {
		err := fmt.Errorf("SendMsgToServer Post err: %v", err)
		srv.l.Error(err)
		return err
	}

	json_data, _ = json.Marshal(map[string]any{
		"user_id":    strconv.Itoa(user_id),
		"bot_id":     strconv.Itoa(botId),
		"message":    msg_txt,
		"sender_type": msg_author, // user | bot | admin
	})
	_, err = http.Post(
		fmt.Sprintf("%s/%s", srv.Cfg.ServerStatUrl, "add_message"),
		"application/json",
		bytes.NewBuffer(json_data),
	)
	if err != nil {
		err := fmt.Errorf("SendMsgToServer Post err: %v", err)
		srv.l.Error(err)
		return err
	}
	return nil
}

func (srv *TgService) SendMessageAndDbAdmin(chat_id int, text string) (models.SendMessageResp, error) {
	resp, err := srv.SendMessage(chat_id, text)
	if err != nil {
		return models.SendMessageResp{}, fmt.Errorf("SendMessageAndDb SendMessage err: %v", err)
	}

	// srv.SendMsgToServer(chat_id, "admin", text)
	return resp, nil
}

func (srv *TgService) SendAnimMessage(steps_id string, chat_id, milisecond int) error {
	steps, ok := srv.Steps[steps_id]
	if !ok {
		return nil
	}

	var messId int
	for i, v := range steps {
		time.Sleep(time.Millisecond * time.Duration(milisecond))
		if i == 0 {
			SendMessageResp, err := srv.SendMessage(chat_id, v)
			if err != nil {
				return fmt.Errorf("SendAnimMessage SendMessage err: %v", err)
			}
			messId = SendMessageResp.Result.MessageId
			continue
		}
		if v == "delete" {
			srv.DeleteMessage(chat_id, messId)
			continue
		}
		srv.EditMessageText(chat_id, messId, v)
	}
	fullMess := steps[len(steps)-1]
	if fullMess == "delete" {
		fullMess = steps[0]
	}

	srv.SendMsgToServer(chat_id, "bot", fullMess)
	return nil
}

func (srv *TgService) SendAnimMessageHTML(steps_id string, chat_id, milisecond int) error {
	steps, ok := srv.Steps[steps_id]
	if !ok {
		return nil
	}

	var messId int
	for i, v := range steps {
		time.Sleep(time.Millisecond * time.Duration(milisecond))
		if i == 0 {
			SendMessageResp, err := srv.SendMessageHTML(chat_id, v)
			if err != nil {
				return fmt.Errorf("SendAnimMessage SendMessageHTML err: %v", err)
			}
			messId = SendMessageResp.Result.MessageId
			continue
		}
		if v == "delete" {
			srv.DeleteMessage(chat_id, messId)
			continue
		}
		srv.EditMessageTextHTML(chat_id, messId, v)
	}
	fullMess := steps[len(steps)-1]
	if fullMess == "delete" {
		fullMess = steps[0]
	}

	srv.SendMsgToServer(chat_id, "bot", fullMess)
	return nil
}

func (srv *TgService) SendBalance(chat_id int, balance string, milisecond int) error {
	time.Sleep(time.Millisecond * time.Duration(milisecond))
	user, err := srv.Db.GetUserById(chat_id)
	if err != nil {
		return fmt.Errorf("SendBalance GetUserById err: %v", err)
	}

	red := strings.Repeat("‚ù§Ô∏è", user.Lives)
	black := strings.Repeat("üñ§", 3-user.Lives)

	logMess := fmt.Sprintf("üè¶ –°–µ–π—á–∞—Å –≤ –±–∞–Ω–∫–µ: %s‚ÇΩ\nü´Ä–ñ–∏–∑–Ω–∏: %s", balance, red+black)
	srv.SendMessageAndDb(chat_id, logMess)

	return nil
}

func (srv *TgService) SendPrePush(chatId int, prePushId int) error {
	PrePushTextMap := map[int]string{
		1: "–¢—ã –¥–æ–ª–≥–æ –±–µ–∑–¥–µ–π—Å—Ç–≤—É–µ—à—å üò∞\n‚ùóÔ∏è –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç —É —Ç–µ–±—è —Å–≥–æ—Ä–∏—Ç –ø–µ—Ä–≤–∞—è –∂–∏–∑–Ω—å",
		2: "–¢—ã –≤—Å–µ –µ—â–µ –±–µ–∑–¥–µ–π—Å—Ç–≤—É–µ—à—å üò±\n‚ùóÔ∏è –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç —É —Ç–µ–±—è —Å–≥–æ—Ä–∏—Ç –≤—Ç–æ—Ä–∞—è –∂–∏–∑–Ω—å",
		3: "‚ùóÔ∏è–û—Å—Ç–∞–ª–æ—Å—å 15 –º–∏–Ω—É—Ç –∏ —É —Ç–µ–±—è —Å–≥–æ—Ä–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—è—è –∂–∏–∑–Ω—å\n\n–¢–∞–∫ —É —Ç–µ–±—è —Å–≥–æ—Ä—è—Ç –≤—Å–µ 3 –∂–∏–∑–Ω–∏ –∏ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è ‚ùå",
	}
	text := PrePushTextMap[prePushId]
	srv.SendMessage(chatId, text)

	srv.SendMsgToServer(chatId, "bot", text)
	// srv.Db.EditStep(chatId, "–¢—ã –¥–æ–ª–≥–æ –±–µ–∑–¥–µ–π—Å—Ç–≤—É–µ—à—å")
	srv.Db.EditIsSendPush(chatId, 1)
	srv.Db.UpdateLatsActiontime(chatId)
	srv.Db.UpdateFeedbackTime(chatId)
	return nil
}

func (srv *TgService) SendPush(chatId int, pushId int) error {
	pushTextMap := map[int]string{
		1: "‚ù§Ô∏è‚ù§Ô∏èüñ§\n<b>–£ —Ç–µ–±—è —Å–≥–æ—Ä–µ–ª–∞ –æ–¥–Ω–∞ –∂–∏–∑–Ω—å, –ø–æ—Ç–æ–º—É —á—Ç–æ 15 –º–∏–Ω—É—Ç –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π üòî</b>\n\n–ü–æ–º–Ω–∏ - —Ç—ã –Ω–µ –∫–æ—à–∫–∞, —É —Ç–µ–±—è –Ω–µ 9 –∂–∏–∑–Ω–µ–π üò∏\n–ï—Å–ª–∏ —Å–≥–æ—Ä—è—Ç –≤—Å–µ –∂–∏–∑–Ω–∏, —Ç–æ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å—Ç–∞—Ç—å—è–º –∑–∞–∫—Ä–æ–µ—Ç—Å—è, –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø—Ä–æ–ø–∞–¥—É—Ç –∏ —Ç—ã —Ç–∞–∫ –∏ –±—É–¥–µ—à—å –¥–æ –∫–æ–Ω—Ü–∞ –∂–∏–∑–Ω–∏ –∂–¥–∞—Ç—å –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ ü§∑üèª‚Äç‚ôÇÔ∏è\n\n–ò–ª–∏ –≤—Å—ë-—Ç–∞–∫–∏ –∏–∑–º–µ–Ω–∏—à—å —Å–≤–æ—é –∂–∏–∑–Ω—å –∫ –ª—É—á—à–µ–º—É?\n\n–£ —Ç–µ–±—è –µ—â–µ –µ—Å—Ç—å –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –¥–æ–π—Ç–∏ –¥–æ —Å–≤–æ–µ–π –Ω–∞–≥—Ä–∞–¥—ã –≤ 100.000‚ÇΩ üí∏",
		2: "‚ù§Ô∏èüñ§üñ§\n<b>–£ —Ç–µ–±—è —Å–≥–æ—Ä–µ–ª–∞ –≤—Ç–æ—Ä–∞—è –∂–∏–∑–Ω—å, –∏ —ç—Ç–æ –æ—á–µ–Ω—å –ø–µ—á–∞–ª—å–Ω–æ üòí</b>\n\n–ï—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—à—å –≤ —Ç–∞–∫–æ–º –∂–µ —Ç–µ–º–ø–µ, —Ç–æ –Ω–∏ –∫ —á–µ–º—É —Ö–æ—Ä–æ—à–µ–º—É —ç—Ç–æ –Ω–µ –ø—Ä–∏–≤–µ–¥—ë—Ç.\n\n–ù–µ—É–∂–µ–ª–∏ —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —á–µ–º-—Ç–æ –±–æ–ª–µ–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º, —á—Ç–æ –≥–æ—Ç–æ–≤ —É–ø—É—Å—Ç–∏—Ç—å —Ç–∞–∫–æ–π —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å –∫ –ª—É—á—à–µ–º—É? üßê\n\n–û—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –∂–∏–∑–Ω—å –∏ –æ–¥–∏–Ω —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É\n–ñ–º–∏ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ ‚òùüèª",
	}
	text := pushTextMap[pushId]
	fileNameInServer := fmt.Sprintf("./files/push_%d.jpg", pushId)
	_, err := srv.SendPhotoWCaption(chatId, text, fileNameInServer)
	if err != nil {
		return fmt.Errorf("Push3 SendPhotoWCaption err: %v", err)
	}
	
	srv.Db.EditLives(chatId, (3 - pushId))
	srv.SendMsgToServer(chatId, "bot", text)
	// srv.Db.EditStep(chatId, text)
	srv.Db.EditIsSendPush(chatId, 0)
	srv.Db.UpdateLatsActiontime(chatId)
	srv.Db.UpdateFeedbackTime(chatId)
	return nil
}

func (srv *TgService) Push3(chatId int) error {
	text := "üñ§üñ§üñ§\n<b>–í—Å–µ –∂–∏–∑–Ω–∏ —Å–≥–æ—Ä–µ–ª–∏ ü•∂\n–ù–æ —É —Ç–µ–±—è –µ—â–µ –µ—Å—Ç—å —à–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö.</b>\n\n–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É—é, —á—Ç–æ —Ç–∞–∫–æ–≥–æ —Ü–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–∞–∫ –¥–∞—é —Ç–µ–±–µ —è, —Ç—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∞–ª üòâ"
	fileNameInServer := "./files/push_3.jpg"
	_, err := srv.SendPhotoWCaption(chatId, text, fileNameInServer)
	if err != nil {
		return fmt.Errorf("Push3 SendPhotoWCaption err: %v", err)
	}

	srv.Db.EditLives(chatId, 0)
	srv.SendMsgToServer(chatId, "bot", text)
	srv.Db.EditIsSendPush(chatId, 0)
	srv.Db.UpdateLatsActiontime(chatId)
	srv.Db.UpdateFeedbackTime(chatId)
	return nil
}

func (srv *TgService) LastPush(chatId int) error {
	text := "<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —É—Å–ø–µ–ª –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ –≤ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –≤–ø—Ä–µ–¥—å –±–æ—Ç –∑–∞–∫—Ä—ã—Ç –¥–ª—è —Ç–µ–±—è –Ω–∞–≤—Å–µ–≥–¥–∞! üòµ</b>\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã - —Ç—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /help ‚úçÔ∏è"
	fileNameInServer := "./files/push_4.jpg"
	_, err := srv.SendPhotoWCaption(chatId, text, fileNameInServer)
	if err != nil {
		return fmt.Errorf("Push3 SendPhotoWCaption err: %v", err)
	}

	srv.Db.EditLives(chatId, 0)
	srv.SendMsgToServer(chatId, "bot", text)
	time.Sleep(time.Second * 3)

	huersStr, _ := srv.GetUserLeftTime(chatId)
	text = fmt.Sprintf("‚ùóÔ∏è–£ —Ç–µ–±—è –µ—Å—Ç—å %s –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ‚ôªÔ∏è\n\n–ï—Å–ª–∏ —Ç—ã –Ω–µ —É—Å–ø–µ–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è, —Ç–æ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç –Ω–∞–≤—Å–µ–≥–¥–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–Ω –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è —Ç–µ–±—è ‚õîÔ∏è", huersStr)
	replyMarkup := `{"inline_keyboard" : [
		[{ "text": "–ó–ê–ë–†–ê–¢–¨ 100.000‚ÇΩ", "callback_data": "restart_game" }]
	]}`
	srv.SendMessageWRM(chatId, text, replyMarkup)

	srv.SendMsgToServer(chatId, "bot", text)
	srv.Db.UpdateLatsActiontime(chatId)
	srv.Db.UpdateFeedbackTime(chatId)
	return nil
}

func (srv *TgService) SendFeedback(chatId, feedbackNum int) error {
	feedbacksMap := map[int]string{
		1: "+1 —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫ —É–∂–µ –ø–æ–ª—É—á–∏–ª –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –Ω–µ —Ç—ãüòû\n\n–ù—É –∂–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∏–≥—Ä—É, —è —É–≤–µ—Ä–µ–Ω —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –µ—ë, —è —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –ø—Ä–∏–∑ –∏ –¥–ª—è —Ç–µ–±—è, –Ω–æ <b>—É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ %s</b> ü´£",
		2: "–ò–≥—Ä—É –º–µ—à–∞–µ—Ç –ø—Ä–æ–π—Ç–∏ –ª–µ–Ω—å —á–µ–ª–æ–≤–µ–∫–∞, –∞ –Ω–µ –µ—ë —Å–ª–æ–∂–Ω–æ—Å—Ç—å. –Ø —É–≤–µ—Ä–µ–Ω —Ç–µ–±–µ –ø–æ —Å–∏–ª–∞–º –ø—Ä–æ–π—Ç–∏ –µ—ë, –ø—Ä–æ—Å—Ç–æ —Å–æ–±–µ—Ä–∏—Å—åü§úüèºü§õüèº\n\n–Ø –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ <b>—É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å %s</b> –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—ë –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫! –î–∞–ª—å—à–µ –±–æ—Ç –¥–ª—è —Ç–µ–±—è –æ—Ç–∫–ª—é—á–∏—Ç—Å—èüòµ",
		3: "–õ—é–±–ª—é —è –∏—Å–ø–æ–ª–Ω—è—Ç—å –∂–µ–ª–∞–Ω–∏—è –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–æ–≥–æ –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Çü•∞\n\n–°—Ç–æ–∏—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–π—Ç–∏ –∏–≥—Ä—É –∏ —è –∏—Å–ø–æ–ª–Ω—é –∏ —Ç–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ, –Ω–æ <b>—É —Ç–µ–±—è –Ω–∞ —ç—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å %s</b> üòØ",
		4: "94%% –ª—é–¥–µ–π –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é—Ç –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞ –ø–æ—Ç–æ–º, –∞ –ø–æ—Ç–æ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–∑–¥–Ω–æü•∂\n\n<b>–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å %s</b> —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª–ø—É –∑–µ–≤–∞–∫ü•±",
		5: "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é - —ç—Ç–æ –º—ë–¥ –¥–ª—è –º–æ–∏—Ö —É—à–µ–πü´†\n\n–ü–æ—á–µ–º—É —è –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø–æ–ª—É—á–∏–ª –≤–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ–±—è?üßê –ê—Ö –¥–∞, –∏–≥—Ä–∞ –µ—â–µ —Ç–æ–±–æ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –Ω–æ <b>—É —Ç–µ–±—è –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å %s</b>. –ü–æ—Ç–æ—Ä–æ–ø–∏—Å—å!",
		6: "–ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—à–µ–ª –∏–≥—Ä—É –≤ —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç –∏ —Å–ø–∞—Å –¥–æ—á—å –æ—Ç –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è –∏–∑ —É–Ω–∏–≤–µ—Ä–∞ü•≥\n\n–ö—Å—Ç–∞—Ç–∏ —Ç—ã —Ç–æ–∂–µ –µ—â–µ –º–æ–∂–µ—à—å –∑–∞–ø—Ä—ã–≥–Ω—É—Ç—å –≤ —É—Ö–æ–¥—è—â–∏–π –≤–∞–≥–æ–Ω –ø–æ–µ–∑–¥–∞, <b>—É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å %s</b> –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –±–æ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—Å—è! –ï—Å–ª–∏ –Ω–∞—á–Ω–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —Ç–æ —É—Å–ø–µ–µ—à—å –ø—Ä–æ–π—Ç–∏ü•µ",
	}

	huersStr, _ := srv.GetUserLeftTime(chatId)
	text := fmt.Sprintf(feedbacksMap[feedbackNum], huersStr)
	fileNameInServer := fmt.Sprintf("./files/feedback_%d.jpg", feedbackNum)
	replyMarkup := `{"inline_keyboard" : [
		[{ "text": "–ó–ê–ë–†–ê–¢–¨ 100.000‚ÇΩ", "callback_data": "restart_game" }]
	]}`
	_, err := srv.SendPhotoWCaptionWRM(chatId, text, fileNameInServer, replyMarkup)
	if err != nil {
		return fmt.Errorf("SendFeedback SendPhotoWCaptionWRM err: %v", err)
	}

	srv.Db.EditdFeedbackCnt(chatId, feedbackNum)
	srv.Db.UpdateFeedbackTime(chatId)
	srv.SendMsgToServer(chatId, "bot", text)
	// srv.Db.EditStep(chatId, text)
	return nil
}


func AbsTimeStrToRusStr(time string) string {
	bef, _, _ := strings.Cut(time, "m")
	bef = strings.Replace(bef, "h", "—á ", -1)
	bef = fmt.Sprintf("%s –º–∏–Ω", bef)
	bef = strings.Replace(bef, "—á–∞—Å–∞ –º–∏–Ω", "—á–∞—Å–∞ ", -1)
	return bef
}

func (srv *TgService) GetUserLeftTime(chatId int) (string, error) {
	user, err := srv.Db.GetUserById(chatId)
	if err != nil {
		return "", fmt.Errorf("GetUserLeftTime GetUserById err: %v", err)
	}
	createdAt, _ := my_time_parser.ParseInLocation(user.CreatedAt, my_time_parser.Msk)
	maxTimeToUseBot := createdAt.Add(time.Hour * 72)
	tn := time.Now().In(my_time_parser.Msk)
	if tn.After(maxTimeToUseBot) {
		return "", nil
	}
	leffft := maxTimeToUseBot.Sub(tn) // —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å —é–∑–∞—Ç—å –±–æ—Ç–∞
	if leffft < 0 {
		return "", nil
	}
	huersStr := AbsTimeStrToRusStr(leffft.Round(time.Second).String())
	return huersStr, nil
}

func (srv *TgService) IsIgnoreUser(chatId int) bool {
	user, err := srv.Db.GetUserById(chatId)
	if err != nil {
		return true
	}
	if user.Id == 0 {
		return false
	}
	createdAt, _ := my_time_parser.ParseInLocation(user.CreatedAt, my_time_parser.Msk)
	maxTimeToUseBot := createdAt.Add(time.Hour*24)
	tn := time.Now().In(my_time_parser.Msk)
	if tn.After(maxTimeToUseBot) {
		return true
	}
	return false
}

func (srv *TgService) GetUserPersonalRef(fromId int) string {
	getMeResp, _ := srv.GetMe(srv.Cfg.Token)
	return fmt.Sprintf("https://t.me/%s?start=%d", getMeResp.Result.UserName, fromId)
}