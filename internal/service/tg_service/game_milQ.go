package tg_service

import (
	"fmt"
	"time"
)

func (srv *TgService) ShowMilQ(chatId, qNum int) error {
	time.Sleep(time.Millisecond * time.Duration(animTimeoutTest))

	textMap := map[int]string{
		1: "–ò —Ç–∞–∫, –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å üëÜ\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç üëá",
		2: "–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å üëÜ\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç üëá",
		3: "–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å üëÜ\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç üëá",
	}
	fileNameMap := map[int]string{
		1:  "./files/mil_q1.jpg",
		2:  "./files/mil_q2.jpg",
		3:  "./files/mil_q3.jpg",
	}
	replyMarkupMap := map[int]string{
		1: `{"inline_keyboard" : [
			[ { "text": "A", "callback_data": "_lose_q_1_" }, { "text": "B", "callback_data": "_lose_q_1_" }, { "text": "C", "callback_data": "_win_q_1_" }, { "text": "D", "callback_data": "_lose_q_1_" }]
		]}`,
		2: `{"inline_keyboard" : [
			[ { "text": "A", "callback_data": "_win_q_2_" }, { "text": "B", "callback_data": "_lose_q_2_" }, { "text": "C", "callback_data": "_lose_q_2_" }, { "text": "D", "callback_data": "_lose_q_2_" }]
		]}`,
		3: `{"inline_keyboard" : [
			[ { "text": "A", "callback_data": "_lose_q_3_" }, { "text": "B", "callback_data": "_lose_q_3_" }, { "text": "C", "callback_data": "_win_q_3_" }, { "text": "D", "callback_data": "_lose_q_3_" }]
		]}`,
	}

	text := textMap[qNum]
	replyMarkup := replyMarkupMap[qNum]
	fileNameInServer := fileNameMap[qNum]
	_, err := srv.SendPhotoWCaptionWRM(chatId, text, fileNameInServer, replyMarkup)
	if err != nil {
		return fmt.Errorf("ShowMilQ SendPhotoWCaptionWRM err: %v", err)
	}
	srv.Db.EditStep(chatId, text)
	srv.SendMsgToServer(chatId, "bot", text)
	return nil
}

func (srv *TgService) ShowQLose(chatId int, q_num string) error {
	time.Sleep(time.Millisecond * time.Duration(animTimeoutTest))

	text := "–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π ‚ùå\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—à–∏–±—Å—è, –Ω–æ —à–∞–Ω—Å –µ—â–µ –µ—Å—Ç—å!\n\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá"
	reply_markup := fmt.Sprintf(`{"inline_keyboard" : [
		[{ "text": "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "callback_data": "show_q_%s_" }]
	]}`, q_num)
	srv.SendMessageWRM(chatId, text, reply_markup)

	// srv.SendMsgToServer(chatId, "bot", text)
	return nil
}

func (srv *TgService) ShowQWin(chatId int, q_num string) error {
	time.Sleep(time.Millisecond * time.Duration(animTimeoutTest))
	
	textMap := map[string]string{
		"1":  "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! ‚úÖ\n\n–ê —Ç—ã –Ω–µ–ø–ª–æ—Ö, –æ—Å—Ç–∞–ª–æ—Å—å 2 –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å –∑–∞–≤–µ—Ç–Ω—ã–µ 5.000 —Ä—É–±–ª–µ–π üëè\n\n–î–∞–≤–∞–π –¥–∞–ª—å—à–µ üëá",
		"2":  "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! ‚úÖ\n\n–ö—Ä–∞—Å–∞–≤—á–∏–∫! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–¥–µ–ª—è—é—â–∏–π —Ç–µ–±—è –æ—Ç –ø—Ä–∏–∑–∞ üí∞\n\n–î–∞–≤–∞–π –¥–∞–ª—å—à–µ üëá",
		"3": "–¢–´ –ü–û–ë–ï–î–ò–õ ‚úÖ\n\n–ü–û–ó–î–†–ê–í–õ–Ø–Æ, –¢–´ –≠–¢–û –°–î–ï–õ–ê–õ, –¢–í–û–Ø –ò–ù–¢–£–ò–¶–ò–Ø –ò –ú–û–ó–ì –¢–ï–ë–Ø –ù–ï –ü–û–î–í–ï–õ–ò! üéâüéâüéâ\n\n–ü—Ä–∏–º–∏ –º–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, —Ç—ã –≤—ã–π–≥—Ä–∞–ª 5.000‚ÇΩ! üòáüéâüéÅ",
	}

	if q_num == "1" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		// time.Sleep(time.Millisecond * 2000)
		srv.ShowMilQ(chatId, 2)
		return nil
	}
	if q_num == "2" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		// time.Sleep(time.Millisecond * 2000)
		srv.ShowMilQ(chatId, 3)
		return nil
	}
	if q_num == "3" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		// time.Sleep(time.Millisecond * 2000)
		// srv.Db.EditStep(chatId, "6")
		// srv.SendAnimMessage("6", chatId, animTimeoutTest)
		// time.Sleep(time.Second)

		// user, _ := srv.Db.GetUserById(chatId)
		chLink := "https://t.me/+rLIklQb0ALNhZjEx"
		chLink2 := "https://t.me/geniusgiveaway"

		messText := fmt.Sprintf("–ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑ , —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å 2 –ø—Ä–æ—Å—Ç—ã—Ö —É—Å–ª–æ–≤–∏—è üòé\n\n–ü–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ:\n–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ªüëá\n\n %s\n %s", chLink, chLink2)
		reply_markup := `{"inline_keyboard" : [
			[{ "text": "–ü–æ–¥–ø–∏—Å–∞–ª—Å—è‚òëÔ∏è", "callback_data": "subscribe" }]
		]}`
		srv.SendMessageWRM(chatId, messText, reply_markup)

		srv.SendMsgToServer(chatId, "bot", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
		return nil
	}
	if q_num == "4" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		time.Sleep(time.Second * 2)
		srv.ShowMilQ(chatId, 5)
		return nil
	}
	if q_num == "5" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		time.Sleep(time.Second * 2)
		srv.ShowMilQ(chatId, 6)
		return nil
	}
	if q_num == "6" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		time.Sleep(time.Second * 2)

		srv.Db.EditStep(chatId, "8")
		srv.SendAnimMessageHTML("8", chatId, 2000)
		srv.Db.EditBotState(chatId, "read_article_after_KNB_win")
		return nil
	}
	if q_num == "7" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		time.Sleep(time.Second * 2)
		srv.ShowMilQ(chatId, 8)
		return nil
	}
	if q_num == "8" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		time.Sleep(time.Second * 2)
		srv.ShowMilQ(chatId, 9)
		return nil
	}
	if q_num == "9" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		time.Sleep(time.Second * 2)

		srv.Db.EditStep(chatId, "10")
		srv.SendAnimMessageHTML("10", chatId, 2000)
		srv.Db.EditBotState(chatId, "read_article_after_OIR_win")
		return nil
	}
	if q_num == "10" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		time.Sleep(time.Second * 2)
		srv.ShowMilQ(chatId, 11)
		return nil
	}
	if q_num == "11" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		time.Sleep(time.Second * 2)
		srv.ShowMilQ(chatId, 12)
		return nil
	}
	if q_num == "12" {
		srv.SendMessageAndDb(chatId, textMap[q_num])
		time.Sleep(time.Second * 2)

		srv.Db.EditStep(chatId, "12")
		srv.SendAnimMessageHTML("12", chatId, 2000)
		srv.Db.EditBotState(chatId, "read_article_after_TrurOrFalse_win")
		return nil
	}
	return nil
}
